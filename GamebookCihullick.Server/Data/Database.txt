PC

C:\Users\matth\source\repos



[
    {
        "id": 0,
        "text": "Hello there, traveler! I need the Golden Jelly Bean. Can you bring it to me?",
        "options": [
            "I'll bring it to you.",
            "Sorry, I can't help right now."
        ]
    },
    {
        "id": 1,
        "text": "Have you found the Golden Jelly Bean for me yet?",
        "options": [
            "Yes, here it is.",
            "Let me leave for now."
        ]
    },
    {
        "id": 2,
        "text": "Thank you for bringing me the Golden Jelly Bean! I won't forget this kindness.",
        "options": [
            "Goodbye."
        ]
    }
]

import React, { useEffect, useState } from 'react';
import { Item } from '../types/'; // Adjust path if needed

type ShopInventoryItem = {
    itemID: number;
    quantity: number;
};

const ShopPage: React.FC = () => {
    const [shopItems, setShopItems] = useState<(Item & { quantity: number })[]>([]);

    useEffect(() => {
        const fetchShopItems = async () => {
            const shopInventory: ShopInventoryItem[] = JSON.parse(localStorage.getItem('shopInventory') || '[]');
            if (shopInventory.length === 0) return;

            try {
                const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/Items`);
                if (!response.ok) {
                    throw new Error(`Failed to fetch items: ${response.statusText}`);
                }
                const allItems: Item[] = await response.json();

                // Match shopInventory with full item details
                const itemsToDisplay = shopInventory.map((inventoryItem) => {
                    const fullItem = allItems.find((item) => item.itemID === inventoryItem.itemID);
                    if (!fullItem) {
                        console.warn(`Item with ID ${inventoryItem.itemID} not found in allItems.`);
                        return null;
                    }
                    return {
                        ...fullItem,
                        quantity: inventoryItem.quantity,
                    };
                }).filter((item) => item !== null); // Filter out any unmatched items

                setShopItems(itemsToDisplay as (Item & { quantity: number })[]);
            } catch (error) {
                console.error('Error fetching shop items:', error);
            }
        };

        fetchShopItems();
    }, []);

    return (
        <div>
            <h1>Shop Inventory</h1>
            <div>
                {shopItems.map((item) => (
                    <div key={item.itemID} style={{ border: '1px solid black', margin: '10px', padding: '10px' }}>
                        <img
                            src={`${import.meta.env.VITE_IMAGE_BASE_URL}${item.image.pathToFile}.webp`}
                            alt={item.name}
                            style={{ width: '100px', height: '100px' }}
                        />
                        <h2>{item.name}</h2>
                        <p>Cost: {item.cost} F</p>
                        <p>Quantity: {item.quantity}</p>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default ShopPage;
